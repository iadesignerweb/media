<!DOCTYPE html>
<html lang="pt-br">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <style>
    /* Resetando margens e preenchimentos */
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }

    /* Estilo geral */
    body {
      font-family: 'Arial', sans-serif;
      background-color: #f4f4f9;
      color: #333;
      display: flex;
      flex-direction: column;
      min-height: 100vh;
      justify-content: space-between;
    }

    /* Cabeçalho com banner */
    header {
      width: 100%;
    }

    /* Banner do GitHub */
    #github-banner {
      width: 100%;
      height: auto;
      display: block;
    }

    /* Seção do conteúdo */
    .container {
      padding: 30px;
      flex: 1;
      display: flex;
      flex-direction: column;
      justify-content: center;
      align-items: center;
    }

    /* Estilo do formulário */
    .form-group {
      width: 100%;
      max-width: 700px;
      margin-bottom: 20px;
    }

    .form-group label {
      display: block;
      font-size: 1.2rem;
      margin-bottom: 10px;
    }

    input, textarea {
      width: 100%;
      padding: 12px;
      border: 1px solid #ddd;
      border-radius: 8px;
      font-size: 1rem;
      margin-bottom: 15px;
      transition: border-color 0.3s ease;
    }

    input:focus, textarea:focus {
      border-color: #4CAF50;
      outline: none;
    }

    button {
      width: 100%;
      padding: 12px;
      background-color: #4CAF50;
      color: white;
      font-size: 1.2rem;
      border: none;
      border-radius: 8px;
      cursor: pointer;
      transition: background-color 0.3s ease;
    }

    button:hover {
      background-color: #45a049;
    }

    .response {
      margin-top: 20px;
      padding: 20px;
      background-color: #fff;
      border-radius: 8px;
      box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
      width: 100%;
      max-width: 700px;
    }

    .response h3 {
      font-size: 1.5rem;
      margin-bottom: 15px;
    }

    .response p {
      font-size: 1rem;
      line-height: 1.5;
      color: #555;
    }

    /* Popup para erro 429 */
    #popupError {
      display: none;
      position: fixed;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background-color: rgba(0, 0, 0, 0.7);
      z-index: 1000;
      justify-content: center;
      align-items: center;
      padding: 20px;
    }

    #popupError img {
      max-width: 100%;
      max-height: 80%;
      border-radius: 8px;
    }

    /* Botão para fechar o popup */
    #closePopup {
      position: absolute;
      top: 10px;
      right: 10px;
      background: none;
      border: none;
      color: white;
      font-size: 1.5rem;
      cursor: pointer;
    }

    /* Footer */
    footer {
      background-color: #333;
      color: white;
      text-align: center;
      padding: 20px;
      font-size: 1rem;
    }

    /* Animação de carregamento */
    .loading {
      display: inline-block;
      border: 4px solid #f3f3f3;
      border-top: 4px solid #4CAF50;
      border-radius: 50%;
      width: 30px;
      height: 30px;
      animation: spin 2s linear infinite;
    }

    @keyframes spin {
      0% { transform: rotate(0deg); }
      100% { transform: rotate(360deg); }
    }
  </style>
</head>
<body>
  <header>
    <img id="github-banner" src="https://raw.githubusercontent.com/iadesignerweb/EAD/refs/heads/main/Banner%20de%20site%2C%20Pl%C3%ADnio%20Fabr%C3%ADcio%2C%20Capa%20de%20YouTube.png" alt="GitHub Banner">
  </header>

  <div class="container">
    <div class="form-group">
      <label for="prompt">Descreva sua ideia:</label>
      <textarea id="prompt" placeholder="Escreva sua ideia aqui..." rows="4"></textarea>
      <button id="submitBtn">Enviar</button>
    </div>

    <div id="responseContainer" class="response" style="display: none;">
      <h3>Resposta da IA:</h3>
      <p id="responseText"></p>
    </div>

    <div id="loading" style="display: none;">
      <div class="loading"></div> Carregando...
    </div>

    <div id="errorMessage" class="error" style="display: none;"></div>
  </div>

  <!-- Popup de erro 429 -->
  <div id="popupError">
    <button id="closePopup">X</button>
    <img src="https://raw.githubusercontent.com/iadesignerweb/EAD/refs/heads/main/Plinio%20Studio%2C%20IA%2C%20Pl%C3%ADnio%20Designer.png" alt="Limite de Requisições Excedido">
  </div>

  <footer>
    <p>@Copyright 2025 Todos direitos reservados • Plínio Fabrício</p>
  </footer>

  <script>
    document.getElementById("submitBtn").addEventListener("click", async function() {
      const prompt = document.getElementById("prompt").value.trim();
      const responseContainer = document.getElementById("responseContainer");
      const responseText = document.getElementById("responseText");
      const loading = document.getElementById("loading");
      const errorMessage = document.getElementById("errorMessage");
      const popupError = document.getElementById("popupError");

      // Limpa a resposta anterior
      responseContainer.style.display = "none";
      loading.style.display = "none";
      errorMessage.style.display = "none";
      popupError.style.display = "none";

      if (!prompt) {
        errorMessage.style.display = "block";
        errorMessage.textContent = "Por favor, insira um texto para gerar a resposta.";
        return;
      }

      // Exibe o carregando
      loading.style.display = "inline-block";

      try {
        const apiKey = 'bacbe22ccd59895b5770fa178b43d03a76f348fe9934ae2d2af9a8c1c78cf112'; // Substitua com a chave correta

        const response = await fetch('https://api.together.xyz/v1/chat/completions', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${apiKey}`
          },
          body: JSON.stringify({
            model: 'meta-llama/Llama-3-70b-chat-hf',
            messages: [
              { role: 'system', content: 'Você é um assistente útil.' },
              { role: 'user', content: prompt }
            ],
            max_tokens: 150,
            temperature: 0.7,
            top_p: 0.7,
            top_k: 50,
            repetition_penalty: 1,
            stop: ["<|eot_id|>"],
            stream: false
          })
        });

        const textResponse = await response.text(); // Pegando como texto
        console.log('Resposta em texto: ', textResponse); // Log da resposta em texto

        // Tentando parsear a resposta
        let data;
        try {
          data = JSON.parse(textResponse); // Tenta parsear a resposta como JSON
        } catch (e) {
          throw new Error('Resposta da API não é um JSON válido');
        }

        // Verifica se a resposta contém o campo "choices" com texto
        if (data.choices && data.choices.length > 0) {
          responseText.textContent = data.choices[0].message.content.trim();
          responseContainer.style.display = "block";
        } else {
          errorMessage.style.display = "block";
          errorMessage.textContent = "Erro: Nenhuma resposta encontrada.";
        }
      } catch (error) {
        if (error.message.includes("429")) {
          popupError.style.display = "flex";
        } else {
          errorMessage.style.display = "block";
          errorMessage.textContent = `Erro ao conectar à API: ${error.message}`;
        }
        console.error("Erro:", error);
      } finally {
        loading.style.display = loading.style.display = "none"; // Esconde o indicador de carregamento
      }
    });

    // Fecha o popup de erro
    document.getElementById("closePopup").addEventListener("click", function() {
      popupError.style.display = "none";
    });
  </script>
</body>
</html>
